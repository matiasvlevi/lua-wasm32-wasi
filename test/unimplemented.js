
const wasi_snapshot_preview1_unimplemented = [
    'random_get',
    'args_get',
    'args_sizes_get',
    'environ_get',
    'environ_sizes_get',
    'fd_close',
    'fd_prestat_get',
    'fd_prestat_dir_name',
    'fd_read',
    'fd_seek',
    'proc_exit',
    'path_open',
    'path_unlink_file',
    'path_filestat_get',
    'path_filestat_set_times',
    'path_symlink',
    'path_link',
    'path_remove_directory',
    'poll_oneoff',
    'proc_raise',
    'sched_yield',
    'sock_send',
    'sock_recv',
    'sock_shutdown',
    'sock_close',
    'fd_fdstat_get',
    'fd_fdstat_set_flags',
    'fd_sync',
    'fd_allocate',
    'fd_advise',
    'path_rename',
    'path_open',
    'fd_filestat_get',
    'fd_filestat_set_times',
    'fd_filestat_set_size',
    'fd_filestat_set_times',
    'fd_renumber',
    'fd_datasync',
    'fd_pread',
    'fd_pwrite',
    'fd_readdir',
    'fd_fdstat_set_rights',
    'fd_tell',
    'path_create_directory',
    'path_readlink',
    'path_filestat_set_size',
    'sock_accept',
    'sock_bind',
    'sock_connect',
    'sock_listen',
    'sock_recvmsg',
    'sock_sendmsg',
    'sock_create',
    'sock_shutdown',
    'sock_recv',
    'sock_send',
];

function makeEnv(bind, symbols, implemented) {
    const env = {};
    const syms = [...new Set([...symbols, ...Object.keys(implemented)])];
    for (let sym of syms) {
        env[sym] = (implemented[sym] == undefined) ? (() => 0) : implemented[sym].bind(bind);
    }
    return env;
}